from flask import Flask, request, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
import pyotp

# Initialize Flask app
app = Flask(_name_)
app.config['SECRET_KEY'] = 'your-secret-key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize extensions
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)  # Store hashed password
    otp_secret = db.Column(db.String(16), nullable=True)  # Store 2FA secret key

    def _repr_(self):
        return f'<User {self.username}>'

# Routes
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400

    if User.query.filter_by(username=username).first():
        return jsonify({"error": "Username already exists"}), 400

    # Hash the password
    password_hash = bcrypt.generate_password_hash(password).decode('utf-8')

    # Create new user
    user = User(username=username, password_hash=password_hash)
    db.session.add(user)
    db.session.commit()

    return jsonify({"message": "User registered successfully"}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400

    user = User.query.filter_by(username=username).first()

    if not user or not bcrypt.check_password_hash(user.password_hash, password):
        return jsonify({"error": "Invalid credentials"}), 401

    if user.otp_secret:  # If 2FA is enabled
        session['temp_user_id'] = user.id
        return jsonify({"message": "2FA required", "user_id": user.id}), 200
    else:
        return jsonify({"message": "Login successful", "user_id": user.id}), 200

@app.route('/verify-2fa', methods=['POST'])
def verify_2fa():
    data = request.get_json()
    user_id = session.get('temp_user_id')
    code = data.get('code')

    if not user_id or not code:
        return jsonify({"error": "User ID and 2FA code are required"}), 400

    user = User.query.get(user_id)

    if not user:
        return jsonify({"error": "User not found"}), 404

    # Verify 2FA code
    totp = pyotp.TOTP(user.otp_secret)
    if not totp.verify(code):
        return jsonify({"error": "Invalid 2FA code"}), 401

    session.pop('temp_user_id', None)
    return jsonify({"message": "2FA verification successful", "user_id": user.id}), 200

@app.route('/enable-2fa', methods=['POST'])
def enable_2fa():
    data = request.get_json()
    user_id = data.get('user_id')

    if not user_id:
        return jsonify({"error": "User ID is required"}), 400

    user = User.query.get(user_id)

    if not user:
        return jsonify({"error": "User not found"}), 404

    # Generate a new secret key for 2FA
    secret = pyotp.random_base32()
    user.otp_secret = secret
    db.session.commit()

    # Generate a TOTP URI for the QR code
    totp_uri = pyotp.totp.TOTP(secret).provisioning_uri(name=user.username, issuer_name="YourAppName")

    return jsonify({"message": "2FA enabled", "secret": secret, "totp_uri": totp_uri}), 200

@app.route('/disable-2fa', methods=['POST'])
def disable_2fa():
    data = request.get_json()
    user_id = data.get('user_id')

    if not user_id:
        return jsonify({"error": "User ID is required"}), 400

    user = User.query.get(user_id)

    if not user:
        return jsonify({"error": "User not found"}), 404

    # Disable 2FA
    user.otp_secret = None
    db.session.commit()

    return jsonify({"message": "2FA disabled"}), 200

# Run the app
if _name_ == '_main_':
    with app.app_context():
        db.create_all()  # Create database tables
    app.run(debug=True)